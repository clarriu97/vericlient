name: CI Pipeline

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install PDM
      run: |
        python -m pip install --upgrade pip
        pip install pdm

    - name: Cache PDM
      id: cache-pdm
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pdm
          __pypackages__
        key: ${{ runner.os }}-pdm-${{ hashFiles('pdm.lock') }}
        restore-keys: |
          ${{ runner.os }}-pdm-

    - name: Install dependencies
      run: pdm install

    - name: Run tests
      run: pdm run test

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  quality:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install PDM
      run: |
        python -m pip install --upgrade pip
        pip install pdm

    - name: Cache PDM
      id: cache-pdm
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pdm
          __pypackages__
        key: ${{ runner.os }}-pdm-${{ hashFiles('pdm.lock') }}
        restore-keys: |
          ${{ runner.os }}-pdm-

    - name: Install dependencies
      run: pdm install

    - name: Run lint
      run: pdm run lint && pdm run lint-tests

  docs:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [test, quality]

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install PDM
      run: |
        python -m pip install --upgrade pip
        pip install pdm

    - name: Cache PDM
      id: cache-pdm
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pdm
          __pypackages__
        key: ${{ runner.os }}-pdm-${{ hashFiles('pdm.lock') }}
        restore-keys: |
          ${{ runner.os }}-pdm-

    - name: Install dependencies
      run: pdm install --group docs

    - name: Build Docs
      run: pdm run docs-build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GH_TOKEN }}
        publish_dir: ./site

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [test, quality]

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install PDM
      run: |
        python -m pip install --upgrade pip
        pip install pdm

    - name: Cache PDM
      id: cache-pdm
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pdm
          __pypackages__
        key: ${{ runner.os }}-pdm-${{ hashFiles('pdm.lock') }}
        restore-keys: |
          ${{ runner.os }}-pdm-

    - name: Install dependencies
      run: pdm install

    - name: Build package
      run: pdm run build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: pdm run publish

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          This is an automatic release from CI for version ${{ github.ref }}.
          - Changelog or other notes can be added here.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Set .whl artifact name
      id: artifact_whl
      run: echo "ARTIFACT_WHL=$(ls dist/*.whl)" >> $GITHUB_ENV

    - name: Set .tar.gz artifact name
      id: artifact_targz
      run: echo "ARTIFACT_TARGZ=$(ls dist/*.tar.gz)" >> $GITHUB_ENV

    - name: Upload .whl Artifact to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARTIFACT_WHL }}
        asset_name: $(basename ${{ env.ARTIFACT_WHL }})
        asset_content_type: application/octet-stream

    - name: Upload .tar.gz Artifact to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARTIFACT_TARGZ }}
        asset_name: $(basename ${{ env.ARTIFACT_TARGZ }})
        asset_content_type: application/gzip
